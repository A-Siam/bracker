version: '3'
services:
  # init kafka continers
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # nginx as api gateway
  nginx:
    image: "nginx:1.22"
    ports:
      - 8088:8080
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/api:/opt

  # apis
  auth:
    build: ./services/auth
    volumes:
      - ./services/auth:/app
    ports:
      - 7894:7894
    depends_on:
      - pgdb
      - nginx
      - broker
      - search_db
    environment:
      - DB_USERNAME=admin
      - DB_PASSWORD=admin
      - DB_HOST=pgdb
      - DB_PORT=5432
      - DB_NAME=auth
      - ACCESS_TOKEN_KEY=ba6a8600a54725c32602e6018e598f2a0d1494ec
      - REFRESH_TOKEN_KEY=ad214a567da7c1019a0a7a2350466824dbefec6b
      
  search:
    build: ./services/search
    volumes:
      - ./services/search:/app
    ports:
      - 7895:7895

  # databases
  pgdb: 
    image: postgres:14.6-alpine
    environment:
      - POSTGRES_PASSWORD=admin
      - POSTGRES_USER=admin
    ports:
      - 5433:5432
    volumes:
      - pgdb_vol:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d # instead of starting multiple instance that hog all my computer resources I created this script that easily create the databases required
    command: postgres -c listen_addresses='*' 

  search_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    environment:
      - xpack.security.enabled=false # To simplify the developement experience
      - "discovery.type=single-node" # To simplify the developement experience
    volumes:
      - search_db_vol:/usr/share/elasticsearch/data
    
  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://search_db:9200
    depends_on:
      - search_db
    ports:
      - 5601:5601

volumes:
  pgdb_vol:
  search_db_vol:
  